# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from tests import IntegrationTestCase
from tests.holodeck import Request
from twilio.base.exceptions import TwilioException
from twilio.http.response import Response


class CompositionTestCase(IntegrationTestCase):

    def test_fetch_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.video.v1.compositions(sid="CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").fetch()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        ))

    def test_fetch_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "status": "completed",
                "date_created": "2015-07-30T20:00:00Z",
                "date_completed": "2015-07-30T20:01:33Z",
                "date_deleted": null,
                "sid": "CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "audio_sources": [
                    "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                ],
                "video_sources": [
                    "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                ],
                "video_layout": "GRID",
                "resolution": "1280x720",
                "format": "webm",
                "bitrate": 64,
                "size": 4,
                "duration": 6,
                "url": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "media": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Media"
                }
            }
            '''
        ))

        actual = self.client.video.v1.compositions(sid="CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").fetch()

        self.assertIsNotNone(actual)

    def test_list_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.video.v1.compositions.list()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://video.twilio.com/v1/Compositions',
        ))

    def test_read_empty_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "compositions": [],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://video.twilio.com/v1/Compositions?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://video.twilio.com/v1/Compositions?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "compositions"
                }
            }
            '''
        ))

        actual = self.client.video.v1.compositions.list()

        self.assertIsNotNone(actual)

    def test_read_results_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "compositions": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "status": "completed",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_completed": "2015-07-30T20:01:33Z",
                        "date_deleted": null,
                        "sid": "CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "audio_sources": [
                            "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                        ],
                        "video_sources": [],
                        "video_layout": "GRID",
                        "resolution": "1280x720",
                        "format": "mp3",
                        "bitrate": 16,
                        "size": 55,
                        "duration": 10,
                        "url": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "links": {
                            "media": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Media"
                        }
                    }
                ],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://video.twilio.com/v1/Compositions?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://video.twilio.com/v1/Compositions?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "compositions"
                }
            }
            '''
        ))

        actual = self.client.video.v1.compositions.list()

        self.assertIsNotNone(actual)

    def test_delete_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.video.v1.compositions(sid="CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").delete()

        self.holodeck.assert_has_request(Request(
            'delete',
            'https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        ))

    def test_delete_response(self):
        self.holodeck.mock(Response(
            204,
            None,
        ))

        actual = self.client.video.v1.compositions(sid="CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").delete()

        self.assertTrue(actual)

    def test_create_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.video.v1.compositions.create()

        self.holodeck.assert_has_request(Request(
            'post',
            'https://video.twilio.com/v1/Compositions',
        ))

    def test_create_response(self):
        self.holodeck.mock(Response(
            201,
            '''
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "status": "processing",
                "date_created": "2015-07-30T20:00:00Z",
                "date_completed": null,
                "date_deleted": null,
                "sid": "CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "audio_sources": [
                    "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "RTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                ],
                "video_sources": [],
                "video_layout": "GRID",
                "resolution": "1280x720",
                "format": "mp3",
                "bitrate": 0,
                "size": 0,
                "duration": 1,
                "url": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "media": "https://video.twilio.com/v1/Compositions/CJaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Media"
                }
            }
            '''
        ))

        actual = self.client.video.v1.compositions.create()

        self.assertIsNotNone(actual)
