                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RH0            DATA 0xf3
0000             68   RTL1           DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   org 0000H
0000              4   
0000 020540       5      ljmp MainProgram
0003              6   
0003              7   ; External interrupt 0 vector (not used in this code)
0003              8   
0003              9   org 0x0003
0003             10   
0003 32          11   reti
0004             12   
0004             13   
0004             14   
0004             15   ; Timer/Counter 0 overflow interrupt vector
0004             16   
000B             17   org 0x000B
000B             18   
000B 020416      19   ljmp Timer0_ISR
000E             20   
000E             21   
000E             22   
000E             23   ; External interrupt 1 vector (not used in this code)
000E             24   
0013             25   org 0x0013
0013             26   
0013 32          27   reti
0014             28   
0014             29   
0014             30   
0014             31   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
0014             32   
001B             33   org 0x001B
001B             34   
001B 32          35   reti
001C             36   
001C             37   
001C             38   
001C             39   ; Serial port receive/transmit interrupt vector (not used in this code)
001C             40   
0023             41   org 0x0023
0023             42   
0023 32          43   reti
0024             44   
0024             45   
0024             46   
0024             47   ; Timer/Counter 2 overflow interrupt vector
0024             48   
002B             49   org 0x002B
002B 020386      50   ljmp Timer2_ISR
002E             51   
002E             52   
002E             53   
                 -1   $include(math32.inc)
                546   $LIST
029E             55   
                 -1   $include(LCD_4bit.inc)
029E              1   cseg
029E              2   ;---------------------------------------------------------------------------
029E              3   ; macro wouldn't work in LCD_4bit.inc ?
029E              4   ;---------------------------------;
029E              5   ; Send a BCD number to PuTTY      ;
029E              6   ;---------------------------------;
029E              7   
029E              8   ;---------------------------------------------------------------------------
029E              9   
029E             10   ; When using a 22.1184MHz crystal in fast mode
029E             11   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
029E             12   
029E             13   ;---------------------------------;
029E             14   ; Wait 40 microseconds            ;
029E             15   ;---------------------------------;
029E             16   Wait40uSec:
029E C000        17            push AR0
02A0 78B1        18            mov R0, #177
02A2             19   L0: 
02A2 00          20            nop
02A3 00          21            nop
02A4 D8FC        22            djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
02A6 D000        23            pop AR0
02A8 22          24       ret
02A9             25   
02A9             26   ;---------------------------------;
02A9             27   ; Wait 'R2' milliseconds          ;
02A9             28   ;---------------------------------;
                 29   Wait_Milli_Seconds mac
                 30   	push AR2
                 31   	mov R2, %0
                 32   	lcall ?Wait_Milli_Seconds
                 33   	pop AR2
                 34   endmac
02A9             35   
02A9             36   ?Wait_Milli_Seconds:
02A9 C000        37            push AR0
02AB C001        38            push AR1
02AD 792D        39   L3: mov R1, #45
02AF 78A6        40   L2: mov R0, #166
02B1 D8FE        41   L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
02B3 D9FA        42       djnz R1, L2 ; 22.51519us*45=1.013ms
02B5 DAF6        43       djnz R2, L3 ; number of millisecons to wait passed in R2
02B7 D001        44       pop AR1
02B9 D000        45       pop AR0
02BB 22          46       ret
02BC             47            
02BC             48   ;---------------------------------;
02BC             49   ; Toggles the 'E' pin in the LCD  ;
02BC             50   ;---------------------------------;
02BC             51   LCD_pulse:
02BC D293        52            setb LCD_E
02BE 12029E      53            lcall Wait40uSec
02C1 C293        54            clr LCD_E
02C3 22          55       ret
02C4             56   
02C4             57   ;---------------------------------;
02C4             58   ; Writes acc to LCD in 4-bit mode ;
02C4             59   ;---------------------------------;
02C4             60   LCD_byte:
02C4             61            ; Write high 4 bits first
02C4 A2E7        62            mov c, ACC.7
02C6 92B5        63            mov LCD_D7, c
02C8 A2E6        64            mov c, ACC.6
02CA 92B4        65            mov LCD_D6, c
02CC A2E5        66            mov c, ACC.5
02CE 92B3        67            mov LCD_D5, c
02D0 A2E4        68            mov c, ACC.4
02D2 92B2        69            mov LCD_D4, c
02D4 1202BC      70       lcall LCD_pulse
02D7 12029E      71       lcall Wait40uSec
02DA             72            ; Write low 4 bits next
02DA A2E3        73            mov c, ACC.3
02DC 92B5        74            mov LCD_D7, c
02DE A2E2        75            mov c, ACC.2
02E0 92B4        76            mov LCD_D6, c
02E2 A2E1        77            mov c, ACC.1
02E4 92B3        78            mov LCD_D5, c
02E6 A2E0        79            mov c, ACC.0
02E8 92B2        80            mov LCD_D4, c
02EA 1202BC      81       lcall LCD_pulse
02ED 22          82            ret
02EE             83   
02EE             84   ;---------------------------------;
02EE             85   ; Write data to LCD               ;
02EE             86   ;---------------------------------;
                 87   WriteData mac
                 88   	mov a, %0
                 89   	lcall ?WriteData
                 90   endmac
02EE             91            
02EE             92   ?WriteData:
02EE D291        93            setb LCD_RS
02F0 0202C4      94            ljmp LCD_byte
02F3             95   
02F3             96   ;---------------------------------;
02F3             97   ; Write command to LCD            ;
02F3             98   ;---------------------------------;
                 99   WriteCommand mac
                100   	mov a, %0
                101   	lcall ?WriteCommand
                102   endmac
02F3            103   
02F3            104   ?WriteCommand:
02F3 C291       105            clr LCD_RS
02F5 0202C4     106            ljmp LCD_byte
02F8            107   
02F8            108   ;---------------------------------;
02F8            109   ; Configure LCD in 4-bit mode     ;
02F8            110   ;---------------------------------;
02F8            111   LCD_4BIT:
02F8 C293       112            clr LCD_E   ; Resting state of LCD's enable pin is zero
02FA C292       113            clr LCD_RW  ; We are only writing to the LCD in this program
02FC            114            
02FC            115            ; After power on, let the LCD start up before initializing
02FC            116            ; NOTE: the preprogrammed power-on delay of 16 ms on the AT89LP52
02FC            117            ; seems to be enough.  That is why this line is commented out.
02FC            118            ; Wait_Milli_Seconds(#40)
02FC            119            
02FC            120            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
02FC 7433       121            mov a, #0x33
02FE 1202F3     121            lcall ?WriteCommand
0301 7433       122            mov a, #0x33
0303 1202F3     122            lcall ?WriteCommand
0306 7432       123            mov a, #0x32
0308 1202F3     123            lcall ?WriteCommand ; change to 4-bit mode
030B            124   
030B            125            ; Configure the LCD
030B 7428       126            mov a, #0x28
030D 1202F3     126            lcall ?WriteCommand
0310 740C       127            mov a, #0x0c
0312 1202F3     127            lcall ?WriteCommand
0315 7401       128            mov a, #0x01
0317 1202F3     128            lcall ?WriteCommand ;  Clear screen command (takes some time)
031A            129   
031A            130       ;Wait for the clear screen command to finish.
031A C002       131            push AR2
031C 7A02       131            mov R2, #2
031E 1202A9     131            lcall ?Wait_Milli_Seconds
0321 D002       131            pop AR2
0323 22         132       ret
0324            133   
0324            134   ;---------------------------------;
0324            135   ; Send a constant string to LCD   ;
0324            136   ;---------------------------------;
                137   Send_Constant_String mac
                138   	push dph
                139   	push dpl
                140   	push acc
                141   	mov dptr, %0
                142   	lcall ?Send_Constant_String
                143   	pop acc
                144   	pop dpl
                145   	pop dph
                146   endmac
0324            147   
0324            148   ?Send_Constant_String:
0324 E4         149       clr a
0325 93         150       movc a, @a+dptr
0326 6006       151       jz ?Send_Constant_String_Done
0328 1202EE     152       lcall ?WriteData
032B A3         153       inc dptr
032C 80F6       154       sjmp ?Send_Constant_String
032E            155   ?Send_Constant_String_Done:
032E 22         156       ret  
032F            157   
032F            158   ;---------------------------------;
032F            159   ; Set LCD cursor at row, column   ;
032F            160   ;---------------------------------;
                161   Set_Cursor mac
                162   	push acc
                163   	mov a, #%1
                164   	dec a
                165   	lcall ?Set_Cursor_%0 ; Select column and row
                166   	pop acc
                167   endmac
032F            168   
032F            169   ?Set_Cursor_2:
032F 4440       170            orl a, #01000000B
0331            171   ?Set_Cursor_1:
0331 4480       172            orl a, #10000000B
0333 0202F3     173            ljmp ?WriteCommand ; Select column and row
0336            174   
0336            175   ;---------------------------------;
0336            176   ; Display a BCD number in the LCD ;
0336            177   ;---------------------------------;
                178   Display_BCD mac
                179   	push ar0
                180   	mov r0, %0
                181   	lcall ?Display_BCD
                182   	pop ar0
                183   endmac
0336            184   
0336            185   ?Display_BCD:
0336 C0E0       186            push acc
0338            187            ; Write most significant digit
0338 E8         188            mov a, r0
0339 C4         189            swap a
033A 540F       190            anl a, #0fh
033C 4430       191            orl a, #30h
033E 1202EE     192            lcall ?WriteData
0341            193            ; write least significant digit
0341 E8         194            mov a, r0
0342 540F       195            anl a, #0fh
0344 4430       196            orl a, #30h
0346 1202EE     197            lcall ?WriteData
0349 D0E0       198            pop acc
034B 22         199            ret
034C            200   
034C            201   ;------------------------------------;
034C            202   ; Display a char in the LCD          ;
034C            203   ;------------------------------------;
                204   Display_char mac
                205   	push acc
                206   	mov a, %0
                207   	lcall ?WriteData
                208   	pop acc
                209   endmac
034C             57   
034C             58   
034C             59   
034C             60   
034C             61   
034C             62   TIMER0_RELOAD_L DATA 0xf2
034C             63   
034C             64   TIMER1_RELOAD_L DATA 0xf3
034C             65   
034C             66   TIMER0_RELOAD_H DATA 0xf4
034C             67   
034C             68   TIMER1_RELOAD_H DATA 0xf5
034C             69   
034C             70   CLK                      EQU 22118400
034C             71   
034C             72   TIMER0_RATE     EQU 500
034C             73   
034C             74   TIMER0_RELOAD   EQU ((65536-(CLK/TIMER0_RATE)))
034C             75   
034C             76   BAUD                     equ 115200
034C             77   
034C             78   BRG_VAL                  equ (0x100-(CLK/(16*BAUD)))
034C             79   
034C             80   CE_ADC                   EQU P2.0
034C             81   
034C             82   MY_MOSI                  EQU P2.1
034C             83   
034C             84   MY_MISO                  EQU P2.2
034C             85   
034C             86   MY_SCLK                  EQU P2.3 
034C             87   
034C             88   ; Seven Segment Wiring
034C             89   EN_DIG_1 EQU P2.4
034C             90   EN_DIG_2 EQU P4.5
034C             91   EN_DIG_3 EQU P2.6
034C             92   
034C             93   SS_A      EQU P0.7
034C             94   SS_B      EQU P0.6
034C             95   SS_C      EQU P0.5
034C             96   SS_D      EQU P0.4
034C             97   SS_E      EQU P0.3
034C             98   SS_F      EQU P0.2
034C             99   SS_G      EQU P0.1
034C            100   
034C            101   ; This is for the seven segment display
034C            102   SS_0    EQU #0x3f
034C            103   SS_1     EQU #0x06
034C            104   SS_2     EQU #0x5b
034C            105   SS_3     EQU #0x4f
034C            106   SS_4     EQU #0x66
034C            107   SS_5     EQU #0x6d
034C            108   SS_6     EQU #0x7d
034C            109   SS_7     EQU #0x07
034C            110   SS_8     EQU #0x7f
034C            111   SS_9     EQU #0x67
034C            112   SS_Err   EQU #0x79 ; This is for debugging purposes
034C            113   
034C            114   ; Timer 2 
034C            115   TIMER2_RATE   EQU 1000 
034C            116   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
034C            117   
034C            118   LCD_RS                   equ P1.1
034C            119   
034C            120   LCD_RW                   equ P1.2
034C            121   
034C            122   LCD_E                    equ P1.3
034C            123   
034C            124   LCD_D4                   equ P3.2
034C            125   
034C            126   LCD_D5                   equ P3.3
034C            127   
034C            128   LCD_D6                   equ P3.4
034C            129   
034C            130   LCD_D7                   equ P3.5
034C            131   
034C            132   PUSH0                    equ P0.1
034C            133   
034C            134   PUSH1                    equ P0.4
034C            135   
034C            136   PUSH2                    equ P0.7
034C            137   
034C            138   NO_HEAT         EQU P0.2
034C            139   
034C            140   NO_COOL         EQU P0.5
034C            141   
034C            142   P_out                    equ P2.5
034C            143   
034C            144   DEBUG                    equ p3.6
034C            145   
034C            146   
034C            147   
0000            148   bseg
0000            149   
0000            150   One_Sec:                 dbit 1
0001            151   
0001            152   mf:                              dbit 1
0002            153   
0002            154   Auto:                    dbit 1
0003            155   
0003            156   Cool_on:                 dbit 1
0004            157   
0004            158   Heat_on:                 dbit 1
0005            159   
0005            160   
0005            161   
0030            162   dseg                     at 30H
0030            163   
0030            164   Count2ms:                ds 1
0031            165   
0031            166   Result:                  ds 2
0033            167   
0033            168   x:                               ds 4
0037            169   
0037            170   y:                               ds 4
003B            171   
003B            172   bcd:                     ds 5
0040            173   
0040            174   Temp:                    ds 2
0042            175   
0042            176   Set_Temp:       ds 2
0044            177   
0044            178   Temp_Upbound:    ds 2
0046            179   
0046            180   Temp_Lowbound:   ds 2
0048            181   
0048            182   Duty_Cycle:              ds 2
004A            183   
004A            184   DC_BCD:                  ds 2
004C            185   
004C            186   Width_Count:     ds 2
004E            187   
004E            188   Count10ms:               ds 1
004F            189   
004F            190   ss_state:       ds 1
0050            191   Disp1:               ds 1
0051            192   Disp2:               ds 1
0052            193   Disp3:               ds 1 ; These correspond to the digits to be displayed 
0053            194   
0053            195   
0053            196   
034C            197   CSEG
034C            198   
034C            199   Timer0_Init:
034C            200   
034C E589       201       mov a, TMOD
034E            202   
034E 54F0       203       anl a, #0xf0 ; Clear the bits for timer 0
0350            204   
0350 4401       205       orl a, #0x01 ; Configure timer 0 as 16-timer
0352            206   
0352 F589       207       mov TMOD, a
0354            208   
0354 758C53     209       mov TH0, #high(TIMER0_RELOAD)
0357            210   
0357 758A34     211       mov TL0, #low(TIMER0_RELOAD)
035A            212   
035A            213       ; Set autoreload value
035A            214   
035A 75F453     215       mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
035D            216   
035D 75F234     217       mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0360            218   
0360 7530FA     219            mov Count2ms, #250
0363            220   
0363 C200       221            clr One_Sec
0365            222   
0365            223       ; Enable the timer and interrupts
0365            224   
0365 D2A9       225       setb ET0  ; Enable timer 0 interrupt
0367            226   
0367 D28C       227       setb TR0  ; Start timer 0
0369            228   
0369 22         229       ret
036A            230   
036A            231   ;---------------------------------;
036A            232   ; Routine to initialize the ISR   ;
036A            233   ; for timer 2                     ;
036A            234   ;---------------------------------;
036A            235   Timer2_Init:
036A C0E0       236            push acc
036C C0D0       237            push psw 
036E 75C800     238            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0371 75CDA9     239            mov TH2, #high(TIMER2_RELOAD)
0374 75CC9A     240            mov TL2, #low(TIMER2_RELOAD)
0377            241            ; Set the reload value
0377 75CBA9     242            mov RCAP2H, #high(TIMER2_RELOAD)
037A 75CA9A     243            mov RCAP2L, #low(TIMER2_RELOAD)
037D            244            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
037D            245            
037D            246            ; Enable the timer and interrupts
037D D2AD       247       setb ET2  ; Enable timer 2 interrupt
037F D2CA       248       setb TR2  ; Enable timer 2
0381 D0D0       249       pop psw
0383 D0E0       250       pop acc
0385 22         251            ret
0386            252   
0386            253   ;---------------------------------;
0386            254   ; ISR for timer 2                 ;
0386            255   ;---------------------------------;
0386            256   Timer2_ISR:
0386 C2CF       257            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0388            258            
0388            259            ; The two registers used in the ISR must be saved in the stack
0388 C0E0       260            push acc
038A C0D0       261            push psw
038C C082       262            push dpl
038E C083       263            push dph
0390 1203A6     264            lcall SS_State_Machine ; Adjust the pins of the microcontroller to display one digit at a time
0393 D083       265            pop dph
0395 D082       266            pop dpl
0397 D0D0       267            pop psw
0399 D0E0       268            pop acc
039B 32         269            reti
039C            270            
039C            271            
039C            272            
039C            273   ; Table for the hex display:
039C C0F9A4B0   274   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99
     99
03A1 9282F880   275                      DB 0x92, 0x82, 0xF8, 0x80, 0x90 
     90
03A6            276   
03A6            277                                    
03A6            278   ; State machine for 7-segment displays starts here
03A6            279   ; Turn all displays off
03A6            280   SS_State_Machine:
03A6 90039C     281            mov dptr, #HEX_7SEG
03A9 E531       282            mov a, result
03AB 540F       283            anl a, #0x0f
03AD 93         284            movc a, @a+dptr
03AE F550       285            mov disp1, a
03B0 E531       286            mov a, result
03B2 C4         287            swap a
03B3 540F       288            anl a, #0x0f
03B5 93         289            movc a, @a+dptr
03B6 F551       290            mov disp2, a
03B8 E532       291            mov a, result+1
03BA 93         292            movc a, @a+dptr
03BB F552       293            mov disp3, a
03BD            294            
03BD D2A4       295            setb EN_DIG_1
03BF D2C5       296            setb EN_DIG_2
03C1 D2A6       297            setb EN_DIG_3
03C3 E54F       298            mov  a, ss_state
03C5            299            
03C5            300   state0:
03C5 B4000B     301            cjne a, #0, state1
03C8 E550       302            mov a, disp1
03CA 1203F4     303            lcall load_segments
03CD C2A4       304            clr EN_DIG_1
03CF 054F       305            inc ss_state
03D1 8020       306            sjmp state_done
03D3            307   state1:
03D3 B4010B     308            cjne a, #1, state2
03D6 E551       309            mov a, disp2
03D8 1203F4     310            lcall load_segments
03DB C2C5       311            clr EN_DIG_2
03DD 054F       312            inc ss_state
03DF 8012       313            sjmp state_done
03E1            314   state2:
03E1 B4020C     315            cjne a, #2, state_reset
03E4 E552       316            mov a, disp3
03E6 1203F4     317            lcall load_segments
03E9 C2A6       318            clr EN_DIG_3
03EB 754F00     319            mov ss_state, #0
03EE 8003       320            sjmp state_done
03F0            321   state_reset:
03F0 754F00     322            mov ss_state, #0
03F3            323   state_done:
03F3 22         324            ret
03F4            325   
03F4            326   
03F4            327   ; Pattern to load passed in acc
03F4            328   load_segments:
03F4 A2E0       329            mov c, acc.0
03F6 9287       330            mov SS_A, c
03F8 A2E1       331            mov c, acc.1
03FA 9286       332            mov SS_B, c
03FC A2E2       333            mov c, acc.2
03FE 9285       334            mov SS_C, c
0400 A2E3       335            mov c, acc.3
0402 9284       336            mov SS_D, c
0404 A2E4       337            mov c, acc.4
0406 9283       338            mov SS_E, c
0408 A2E5       339            mov c, acc.5
040A 9282       340            mov SS_F, c
040C A2E6       341            mov c, acc.6
040E 9281       342            mov SS_G, c 
0410 22         343            ret
0411            344   
0411            345   
0411            346   
0411            347   Timer0_Done_0:
0411            348   
0411 D0D0       349            pop psw
0413            350   
0413 D0E0       351            pop acc
0415            352   
0415 32         353            reti
0416            354   
0416            355   Timer0_ISR:
0416            356   
0416 C0E0       357            push acc
0418            358   
0418 C0D0       359            push psw
041A            360   
041A D54E03     361            djnz Count10ms, Acquire_Temp
041D            362   
041D 754E05     363            mov Count10ms, #5
0420            364   
0420            365   Acquire_Temp:
0420            366   
0420 D530EE     367            djnz Count2ms, Timer0_Done_0
0423            368   
0423 7530FA     369            mov Count2ms, #250
0426            370            
0426 B2B6       371            cpl DEBUG
0428            372   
0428 C2A0       373            clr CE_ADC
042A            374   
042A 7801       375            mov R0, #00000001B ; Start bit:1
042C            376   
042C 1204DB     377            lcall DO_SPI_G
042F            378   
042F 7880       379            mov R0, #10000000B ; Single ended, read channel 0
0431            380   
0431 1204DB     381            lcall DO_SPI_G
0434            382   
0434 E9         383            mov a, R1 ; R1 contains bits 8 and 9
0435            384   
0435 5403       385            anl a, #00000011B ; We need only the two least significant bits
0437            386   
0437 F532       387            mov Result+1, a ; Save result high.
0439            388   
0439 7855       389            mov R0, #55H ; It doesn't matter what we transmit...
043B            390   
043B 1204DB     391            lcall DO_SPI_G
043E            392   
043E 8931       393            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
0440            394   
0440 D2A0       395            setb CE_ADC
0442            396   
0442 753600     397            mov x+3, #0
0445            398   
0445 753500     399            mov x+2, #0
0448            400   
0448 853234     401            mov x+1, Result+1
044B            402   
044B 853133     403            mov x+0, Result
044E            404   
044E 7537C9     405            mov y+0, #low (2505 % 0x10000) 
0451 753809     405            mov y+1, #high(2505 % 0x10000) 
0454 753900     405            mov y+2, #low (2505 / 0x10000) 
0457 753A00     405            mov y+3, #high(2505 / 0x10000) 
045A            406   
045A 1201A8     407            lcall mul32
045D            408   
045D 753764     409            mov y+0, #low (100 % 0x10000) 
0460 753800     409            mov y+1, #high(100 % 0x10000) 
0463 753900     409            mov y+2, #low (100 / 0x10000) 
0466 753A00     409            mov y+3, #high(100 / 0x10000) 
0469            410   
0469 120235     411            lcall div32
046C            412   
046C 753782     413            mov y+0, #low (130 % 0x10000) 
046F 753800     413            mov y+1, #high(130 % 0x10000) 
0472 753900     413            mov y+2, #low (130 / 0x10000) 
0475 753A00     413            mov y+3, #high(130 / 0x10000) 
0478            414   
0478 1200F3     415            lcall add32
047B            416   
047B 75379C     417            mov y+0, #low (2460 % 0x10000) 
047E 753809     417            mov y+1, #high(2460 % 0x10000) 
0481 753900     417            mov y+2, #low (2460 / 0x10000) 
0484 753A00     417            mov y+3, #high(2460 / 0x10000) 
0487            418   
0487 1200F3     419            lcall add32
048A            420            
048A 753764     421            mov y+0, #low (100 % 0x10000) 
048D 753800     421            mov y+1, #high(100 % 0x10000) 
0490 753900     421            mov y+2, #low (100 / 0x10000) 
0493 753A00     421            mov y+3, #high(100 / 0x10000) 
0496            422            
0496 120235     423            lcall div32
0499            424   
0499 12002E     425            lcall hex2bcd
049C            426   
049C 853C32     427            mov Result+1, bcd+1
049F            428   
049F 853B31     429            mov Result+0, bcd+0
04A2            430   
04A2 C0E0       431            push acc
04A4 7401       431            mov a, #1
04A6 14         431            dec a
04A7 12032F     431            lcall ?Set_Cursor_2 ; Select column and row
04AA D0E0       431            pop acc
04AC            432   
04AC C000       433            push ar0
04AE A83C       433            mov r0, bcd+1
04B0 120336     433            lcall ?Display_BCD
04B3 D000       433            pop ar0
04B5            434   
04B5 C000       435            push ar0
04B7 A83B       435            mov r0, bcd
04B9 120336     435            lcall ?Display_BCD
04BC D000       435            pop ar0
04BE            436   
04BE C0E0       437            push acc
04C0 7405       437            mov a, #5
04C2 14         437            dec a
04C3 12032F     437            lcall ?Set_Cursor_2 ; Select column and row
04C6 D0E0       437            pop acc
04C8            438   
04C8 C0E0       439            push acc
04CA 7443       439            mov a, #'C'
04CC 1202EE     439            lcall ?WriteData
04CF D0E0       439            pop acc
04D1            440   
04D1            441   Timer0_Done:
04D1            442   
04D1 D0D0       443            pop psw
04D3            444   
04D3 D0E0       445            pop acc
04D5            446   
04D5 32         447            reti
04D6            448   
04D6            449   
04D6            450   INIT_SPI:
04D6            451   
04D6 D2A2       452            setb MY_MISO ; Make MISO an input pin
04D8            453   
04D8 C2A3       454            clr MY_SCLK ; For mode (0,0) SCLK is zero
04DA            455   
04DA 22         456            ret
04DB            457   
04DB            458   
04DB            459   
04DB            460   DO_SPI_G:
04DB            461   
04DB C0E0       462            push acc
04DD            463   
04DD 7900       464            mov R1, #0 ; Received byte stored in R1
04DF            465   
04DF 7A08       466            mov R2, #8 ; Loop counter (8-bits)
04E1            467   
04E1            468   DO_SPI_G_LOOP:
04E1            469   
04E1 E8         470            mov a, R0 ; Byte to write is in R0
04E2            471   
04E2 33         472            rlc a ; Carry flag has bit to write
04E3            473   
04E3 F8         474            mov R0, a
04E4            475   
04E4 92A1       476            mov MY_MOSI, c
04E6            477   
04E6 D2A3       478            setb MY_SCLK ; Transmit
04E8            479   
04E8 A2A2       480            mov c, MY_MISO ; Read received bit
04EA            481   
04EA E9         482            mov a, R1 ; Save received bit in R1
04EB            483   
04EB 33         484            rlc a
04EC            485   
04EC F9         486            mov R1, a
04ED            487   
04ED C2A3       488            clr MY_SCLK
04EF            489   
04EF DAF0       490            djnz R2, DO_SPI_G_LOOP
04F1            491   
04F1 D0E0       492            pop acc
04F3            493   
04F3 22         494            ret
04F4            495   
04F4            496   
04F4            497   
04F4            498   
04F4            499   
04F4 43555252   500   Init_line_0:     db 'CURR:           ', 0
     3A202020
     20202020
     20202020
     00
0505            501   
0505 20202020   502   Init_line_1:     db '                ', 0
     20202020
     20202020
     20202020
     00
0516            503   
0516 413A00     504   AUTO_ICON:               db 'A:', 0
0519            505   
0519 204F4646   506   OFF:                     db ' OFF', 0
     00
051E            507   
051E 434F4F4C   508   COOL:                    db 'COOL', 0
     00
0523            509   
0523 48454154   510   HEAT:                    db 'HEAT', 0
     00
0528            511   
0528            512   
0528            513   ; Set low the enable pins and pull up the driving pins
0528            514   INIT_SS:
0528 758E01     515            mov AUXR, #0x01
052B C2A4       516            clr EN_DIG_1
052D C2C5       517            clr EN_DIG_2
052F C2A6       518            clr EN_DIG_3 ; Disable the digits
0531            519            
0531 D287       520            setb SS_A
0533 D286       521            setb SS_B
0535 D285       522            setb SS_C
0537 D284       523            setb SS_D
0539 D283       524            setb SS_E
053B D282       525            setb SS_F
053D D281       526            setb SS_G
053F            527            
053F 22         528            ret
0540            529   
0540            530   MainProgram:
0540            531   
0540 75817F     532       mov SP, #7FH ; Set the stack pointer to the begining of idata
0543            533   
0543 D2A0       534       setb CE_ADC
0545            535   
0545 1204D6     536       lcall INIT_SPI
0548            537   
0548 1202F8     538       lcall LCD_4bit
054B            539   
054B 12036A     540       lcall Timer2_Init ; Some initializations
054E 12034C     541       lcall Timer0_Init
0551 120528     542       lcall INIT_SS
0554 75E600     543       mov P0M0, #0
0557 75E700     544       mov P0M1, #0 
055A 75BE00     545       mov P4M0, #0
055D 75BF00     546       mov P4M1, #0
0560 75CE00     547       mov P2M0, #0
0563 75CF00     548       mov P2M1, #0 ; set pins in biconditional mode
0566 758E01     549       Mov AUXR, #00000001B
0569 754F00     550       mov ss_state, #0x00
056C            551   
056C D2AF       552       setb EA
056E            553   
056E 75E600     554       mov P0M0, #0
0571            555   
0571 75E700     556       mov P0M1, #0
0574            557   
0574 C083       558            push dph
0576 C082       558            push dpl
0578 C0E0       558            push acc
057A 9004F4     558            mov dptr, #Init_line_0
057D 120324     558            lcall ?Send_Constant_String
0580 D0E0       558            pop acc
0582 D082       558            pop dpl
0584 D083       558            pop dph
0586            559   
0586 C083       560            push dph
0588 C082       560            push dpl
058A C0E0       560            push acc
058C 900505     560            mov dptr, #Init_line_1
058F 120324     560            lcall ?Send_Constant_String
0592 D0E0       560            pop acc
0594 D082       560            pop dpl
0596 D083       560            pop dph
0598            561   
0598            562            
0598            563   
0598            564   Init_value:
0598            565   
0598 754319     566            mov Set_Temp+1, #0x19
059B            567   
059B 754250     568       mov Set_Temp+0, #0x50
059E            569   
059E 754520     570       mov Temp_Upbound+1, #0x20
05A1            571   
05A1 754450     572       mov Temp_Upbound+0, #0x50
05A4            573   
05A4 754718     574       mov Temp_Lowbound+1, #0x18
05A7            575   
05A7 754650     576       mov Temp_Lowbound+0, #0x50
05AA            577   
05AA 754814     578       mov Duty_Cycle, #20
05AD            579   
05AD C202       580       clr Auto
05AF            581   
05AF C203       582            clr Cool_on
05B1            583   
05B1 C204       584            clr Heat_on
05B3            585   
05B3 D281       586            setb PUSH0
05B5            587   
05B5 D284       588            setb PUSH1
05B7            589   
05B7 D287       590            setb PUSH2
05B9            591   
05B9            592       
05B9            593   
05B9            594   forever_loop:
05B9 80FE       595            sjmp $
05BB            596   
05BB            597   END
